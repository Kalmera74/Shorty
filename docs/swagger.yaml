basePath: /
definitions:
  shortener.SearchRequest:
    properties:
      original_url:
        type: string
    type: object
  shortener.ShortenRequest:
    properties:
      original_url:
        type: string
      user_id:
        type: integer
    type: object
  shortener.ShortenResponse:
    properties:
      id:
        type: integer
      original_url:
        type: string
      short_url:
        type: string
    type: object
  user.UserCreateRequest:
    properties:
      email:
        type: string
      user_name:
        type: string
    type: object
  user.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      user_name:
        type: string
    type: object
  user.UserUpdateRequest:
    properties:
      email:
        type: string
      user_name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API for Shorty URL shortener
  license:
    name: MIT
  title: Shorty API
  version: "1.0"
paths:
  /{url}:
    get:
      parameters:
      - description: Short string ID
        in: path
        name: url
        required: true
        type: string
      responses:
        "301":
          description: Redirects to the original URL
          schema:
            type: string
        "404":
          description: Short not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Redirect to the original URL
      tags:
      - Shortener
  /shorten:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/shortener.ShortenResponse'
            type: array
        "404":
          description: No Shorts found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all Shorts in the system
      tags:
      - Shortener
    post:
      consumes:
      - application/json
      description: Creates a new Short for the given long URL.
      parameters:
      - description: Shorten URL request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/shortener.ShortenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shortener.ShortenResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Shorten a URL
      tags:
      - Shortener
  /shorten/{id}:
    delete:
      parameters:
      - description: Short numeric ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Short not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a Short by its numeric ID
      tags:
      - Shortener
    get:
      parameters:
      - description: Short numeric ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shortener.ShortenResponse'
        "404":
          description: Short not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a Short by its numeric ID
      tags:
      - Shortener
  /shorten/search:
    post:
      consumes:
      - application/json
      description: Looks up a Short by providing its original, long URL.
      parameters:
      - description: Original URL to look up
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/shortener.SearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shortener.ShortenResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Short not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Search for a Short by its original URL
      tags:
      - Shortener
  /shorten/short/{url}:
    get:
      parameters:
      - description: Short URL string
        in: path
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shortener.ShortenResponse'
        "404":
          description: Short not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Gets a Short by its short URL
      tags:
      - Shortener
  /shorten/user/{id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/shortener.ShortenResponse'
            type: array
        "404":
          description: No Shorts found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all Shorts for a user
      tags:
      - Shortener
  /users:
    get:
      description: Get all registered users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user with username and email
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Remove a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user
      tags:
      - users
    get:
      description: Fetch a user given their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update username or email of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a user
      tags:
      - users
swagger: "2.0"
